//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Physics/Base physics/PhysicsControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PhysicsControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PhysicsControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PhysicsControls"",
    ""maps"": [
        {
            ""name"": ""Catapult"",
            ""id"": ""9762c3c8-315d-45be-a878-00b5e337ab7f"",
            ""actions"": [
                {
                    ""name"": ""Launch"",
                    ""type"": ""Button"",
                    ""id"": ""17ef6257-3288-4a1b-85d3-6a6ae61122c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""4f330860-96c5-4058-926e-0ee0d6c22be7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b2dff37f-5ace-4a7b-9196-574a0a6ab96c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Launch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dcafb949-f4d3-406a-b38c-54b14c5b4a6a"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Car"",
            ""id"": ""d4beba50-5d71-41a1-8285-45d326d0e8b3"",
            ""actions"": [
                {
                    ""name"": ""Breaking"",
                    ""type"": ""Button"",
                    ""id"": ""5bf75e8f-d2c5-4def-b02e-dede86e45c80"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5be71838-bbbb-493e-a3ea-07a431fdab96"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Breaking"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Catapult
        m_Catapult = asset.FindActionMap("Catapult", throwIfNotFound: true);
        m_Catapult_Launch = m_Catapult.FindAction("Launch", throwIfNotFound: true);
        m_Catapult_Reset = m_Catapult.FindAction("Reset", throwIfNotFound: true);
        // Car
        m_Car = asset.FindActionMap("Car", throwIfNotFound: true);
        m_Car_Breaking = m_Car.FindAction("Breaking", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Catapult
    private readonly InputActionMap m_Catapult;
    private ICatapultActions m_CatapultActionsCallbackInterface;
    private readonly InputAction m_Catapult_Launch;
    private readonly InputAction m_Catapult_Reset;
    public struct CatapultActions
    {
        private @PhysicsControls m_Wrapper;
        public CatapultActions(@PhysicsControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Launch => m_Wrapper.m_Catapult_Launch;
        public InputAction @Reset => m_Wrapper.m_Catapult_Reset;
        public InputActionMap Get() { return m_Wrapper.m_Catapult; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CatapultActions set) { return set.Get(); }
        public void SetCallbacks(ICatapultActions instance)
        {
            if (m_Wrapper.m_CatapultActionsCallbackInterface != null)
            {
                @Launch.started -= m_Wrapper.m_CatapultActionsCallbackInterface.OnLaunch;
                @Launch.performed -= m_Wrapper.m_CatapultActionsCallbackInterface.OnLaunch;
                @Launch.canceled -= m_Wrapper.m_CatapultActionsCallbackInterface.OnLaunch;
                @Reset.started -= m_Wrapper.m_CatapultActionsCallbackInterface.OnReset;
                @Reset.performed -= m_Wrapper.m_CatapultActionsCallbackInterface.OnReset;
                @Reset.canceled -= m_Wrapper.m_CatapultActionsCallbackInterface.OnReset;
            }
            m_Wrapper.m_CatapultActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Launch.started += instance.OnLaunch;
                @Launch.performed += instance.OnLaunch;
                @Launch.canceled += instance.OnLaunch;
                @Reset.started += instance.OnReset;
                @Reset.performed += instance.OnReset;
                @Reset.canceled += instance.OnReset;
            }
        }
    }
    public CatapultActions @Catapult => new CatapultActions(this);

    // Car
    private readonly InputActionMap m_Car;
    private ICarActions m_CarActionsCallbackInterface;
    private readonly InputAction m_Car_Breaking;
    public struct CarActions
    {
        private @PhysicsControls m_Wrapper;
        public CarActions(@PhysicsControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Breaking => m_Wrapper.m_Car_Breaking;
        public InputActionMap Get() { return m_Wrapper.m_Car; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CarActions set) { return set.Get(); }
        public void SetCallbacks(ICarActions instance)
        {
            if (m_Wrapper.m_CarActionsCallbackInterface != null)
            {
                @Breaking.started -= m_Wrapper.m_CarActionsCallbackInterface.OnBreaking;
                @Breaking.performed -= m_Wrapper.m_CarActionsCallbackInterface.OnBreaking;
                @Breaking.canceled -= m_Wrapper.m_CarActionsCallbackInterface.OnBreaking;
            }
            m_Wrapper.m_CarActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Breaking.started += instance.OnBreaking;
                @Breaking.performed += instance.OnBreaking;
                @Breaking.canceled += instance.OnBreaking;
            }
        }
    }
    public CarActions @Car => new CarActions(this);
    public interface ICatapultActions
    {
        void OnLaunch(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
    }
    public interface ICarActions
    {
        void OnBreaking(InputAction.CallbackContext context);
    }
}
