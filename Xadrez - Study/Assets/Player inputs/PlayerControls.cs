//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Player inputs/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Actions"",
            ""id"": ""41739385-61c1-4550-8678-81acc58b4c8c"",
            ""actions"": [
                {
                    ""name"": ""Touch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d347e45f-0d67-4fcc-8490-bd97e66a1362"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPoint"",
                    ""type"": ""Value"",
                    ""id"": ""8c0ddc61-93e7-474b-9c06-53495bd10619"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ClickPoint"",
                    ""type"": ""Value"",
                    ""id"": ""58e29696-28ab-4ed4-ae5d-63ad12efd6d5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""61911803-165e-4158-8472-d7c19f155673"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12e7a03a-1319-43c3-9f98-86cbca54689b"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""TouchPoint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4176723e-4596-4e07-88d9-3f5633b8400f"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickPoint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mobile"",
            ""bindingGroup"": ""Mobile"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Actions
        m_Actions = asset.FindActionMap("Actions", throwIfNotFound: true);
        m_Actions_Touch = m_Actions.FindAction("Touch", throwIfNotFound: true);
        m_Actions_TouchPoint = m_Actions.FindAction("TouchPoint", throwIfNotFound: true);
        m_Actions_ClickPoint = m_Actions.FindAction("ClickPoint", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Actions
    private readonly InputActionMap m_Actions;
    private IActionsActions m_ActionsActionsCallbackInterface;
    private readonly InputAction m_Actions_Touch;
    private readonly InputAction m_Actions_TouchPoint;
    private readonly InputAction m_Actions_ClickPoint;
    public struct ActionsActions
    {
        private @PlayerControls m_Wrapper;
        public ActionsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Touch => m_Wrapper.m_Actions_Touch;
        public InputAction @TouchPoint => m_Wrapper.m_Actions_TouchPoint;
        public InputAction @ClickPoint => m_Wrapper.m_Actions_ClickPoint;
        public InputActionMap Get() { return m_Wrapper.m_Actions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionsActions set) { return set.Get(); }
        public void SetCallbacks(IActionsActions instance)
        {
            if (m_Wrapper.m_ActionsActionsCallbackInterface != null)
            {
                @Touch.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnTouch;
                @Touch.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnTouch;
                @Touch.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnTouch;
                @TouchPoint.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnTouchPoint;
                @TouchPoint.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnTouchPoint;
                @TouchPoint.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnTouchPoint;
                @ClickPoint.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnClickPoint;
                @ClickPoint.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnClickPoint;
                @ClickPoint.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnClickPoint;
            }
            m_Wrapper.m_ActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Touch.started += instance.OnTouch;
                @Touch.performed += instance.OnTouch;
                @Touch.canceled += instance.OnTouch;
                @TouchPoint.started += instance.OnTouchPoint;
                @TouchPoint.performed += instance.OnTouchPoint;
                @TouchPoint.canceled += instance.OnTouchPoint;
                @ClickPoint.started += instance.OnClickPoint;
                @ClickPoint.performed += instance.OnClickPoint;
                @ClickPoint.canceled += instance.OnClickPoint;
            }
        }
    }
    public ActionsActions @Actions => new ActionsActions(this);
    private int m_MobileSchemeIndex = -1;
    public InputControlScheme MobileScheme
    {
        get
        {
            if (m_MobileSchemeIndex == -1) m_MobileSchemeIndex = asset.FindControlSchemeIndex("Mobile");
            return asset.controlSchemes[m_MobileSchemeIndex];
        }
    }
    public interface IActionsActions
    {
        void OnTouch(InputAction.CallbackContext context);
        void OnTouchPoint(InputAction.CallbackContext context);
        void OnClickPoint(InputAction.CallbackContext context);
    }
}
