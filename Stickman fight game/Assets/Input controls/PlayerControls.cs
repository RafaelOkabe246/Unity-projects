//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input controls/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace PlayerControlsNamespace
{
    public partial class @PlayerControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Character Control"",
            ""id"": ""03e89214-90e3-47fc-8078-23ab0c975d80"",
            ""actions"": [
                {
                    ""name"": ""MoveCharacter"",
                    ""type"": ""Value"",
                    ""id"": ""fe90b84c-aae5-4157-acf1-c8afbeb54eed"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""5461d201-a8d4-408e-a710-e81b4adde96c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""24f447fa-2e73-4854-aa0b-c47b8770c31b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Value"",
                    ""id"": ""69be0479-4dc5-4c84-aa6a-83564a844035"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""28eb05f3-1a3b-4a47-bd93-be8c348575b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a0ef3cb4-ad09-4c95-a888-46d3d03e20fd"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""2bbd751f-677f-4903-a5ff-9cc45873d53f"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCharacter"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""906f1cb7-8d64-4d82-9fb6-3937a9c51773"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCharacter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a373c6ba-6c40-4307-a63d-e06ec30da468"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCharacter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b3d4a36e-1445-41d5-bd7e-de7b440581b2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCharacter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c0f47466-7b3e-434b-ae46-0a56154a16cc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCharacter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""be74f3b5-452b-4441-90bb-a76b6cea4ddd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCharacter"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""28d8a4ac-764a-4d46-82dd-3601296c2c01"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCharacter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""bc3b1e1e-9ec7-47ac-9e11-ae87c2952e08"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCharacter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""07e50151-56a4-444d-84fe-73168807ab98"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCharacter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5b27dca8-b3cc-4d6d-baf3-b130d4ebdb6a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCharacter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e3ff5e6e-3280-4808-a508-ad2bf5142395"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b961c2df-1c3b-41f5-92f0-8030b2c5ac45"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dda16105-8079-46b1-8c6a-5d0020debcc3"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6091c69a-4d0d-46c2-ba29-9776e618dd1a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Ui navigation"",
            ""id"": ""90c56990-fe9a-4442-8b5e-287889f3d1ba"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""3bcd8914-28e1-49e0-acbc-5af8812b29d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1821fbab-0056-4d02-aa26-9858659b4f9e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Character Control
            m_CharacterControl = asset.FindActionMap("Character Control", throwIfNotFound: true);
            m_CharacterControl_MoveCharacter = m_CharacterControl.FindAction("MoveCharacter", throwIfNotFound: true);
            m_CharacterControl_Interact = m_CharacterControl.FindAction("Interact", throwIfNotFound: true);
            m_CharacterControl_Attack = m_CharacterControl.FindAction("Attack", throwIfNotFound: true);
            m_CharacterControl_Run = m_CharacterControl.FindAction("Run", throwIfNotFound: true);
            m_CharacterControl_Jump = m_CharacterControl.FindAction("Jump", throwIfNotFound: true);
            // Ui navigation
            m_Uinavigation = asset.FindActionMap("Ui navigation", throwIfNotFound: true);
            m_Uinavigation_Newaction = m_Uinavigation.FindAction("New action", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Character Control
        private readonly InputActionMap m_CharacterControl;
        private ICharacterControlActions m_CharacterControlActionsCallbackInterface;
        private readonly InputAction m_CharacterControl_MoveCharacter;
        private readonly InputAction m_CharacterControl_Interact;
        private readonly InputAction m_CharacterControl_Attack;
        private readonly InputAction m_CharacterControl_Run;
        private readonly InputAction m_CharacterControl_Jump;
        public struct CharacterControlActions
        {
            private @PlayerControls m_Wrapper;
            public CharacterControlActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @MoveCharacter => m_Wrapper.m_CharacterControl_MoveCharacter;
            public InputAction @Interact => m_Wrapper.m_CharacterControl_Interact;
            public InputAction @Attack => m_Wrapper.m_CharacterControl_Attack;
            public InputAction @Run => m_Wrapper.m_CharacterControl_Run;
            public InputAction @Jump => m_Wrapper.m_CharacterControl_Jump;
            public InputActionMap Get() { return m_Wrapper.m_CharacterControl; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CharacterControlActions set) { return set.Get(); }
            public void SetCallbacks(ICharacterControlActions instance)
            {
                if (m_Wrapper.m_CharacterControlActionsCallbackInterface != null)
                {
                    @MoveCharacter.started -= m_Wrapper.m_CharacterControlActionsCallbackInterface.OnMoveCharacter;
                    @MoveCharacter.performed -= m_Wrapper.m_CharacterControlActionsCallbackInterface.OnMoveCharacter;
                    @MoveCharacter.canceled -= m_Wrapper.m_CharacterControlActionsCallbackInterface.OnMoveCharacter;
                    @Interact.started -= m_Wrapper.m_CharacterControlActionsCallbackInterface.OnInteract;
                    @Interact.performed -= m_Wrapper.m_CharacterControlActionsCallbackInterface.OnInteract;
                    @Interact.canceled -= m_Wrapper.m_CharacterControlActionsCallbackInterface.OnInteract;
                    @Attack.started -= m_Wrapper.m_CharacterControlActionsCallbackInterface.OnAttack;
                    @Attack.performed -= m_Wrapper.m_CharacterControlActionsCallbackInterface.OnAttack;
                    @Attack.canceled -= m_Wrapper.m_CharacterControlActionsCallbackInterface.OnAttack;
                    @Run.started -= m_Wrapper.m_CharacterControlActionsCallbackInterface.OnRun;
                    @Run.performed -= m_Wrapper.m_CharacterControlActionsCallbackInterface.OnRun;
                    @Run.canceled -= m_Wrapper.m_CharacterControlActionsCallbackInterface.OnRun;
                    @Jump.started -= m_Wrapper.m_CharacterControlActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_CharacterControlActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_CharacterControlActionsCallbackInterface.OnJump;
                }
                m_Wrapper.m_CharacterControlActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @MoveCharacter.started += instance.OnMoveCharacter;
                    @MoveCharacter.performed += instance.OnMoveCharacter;
                    @MoveCharacter.canceled += instance.OnMoveCharacter;
                    @Interact.started += instance.OnInteract;
                    @Interact.performed += instance.OnInteract;
                    @Interact.canceled += instance.OnInteract;
                    @Attack.started += instance.OnAttack;
                    @Attack.performed += instance.OnAttack;
                    @Attack.canceled += instance.OnAttack;
                    @Run.started += instance.OnRun;
                    @Run.performed += instance.OnRun;
                    @Run.canceled += instance.OnRun;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                }
            }
        }
        public CharacterControlActions @CharacterControl => new CharacterControlActions(this);

        // Ui navigation
        private readonly InputActionMap m_Uinavigation;
        private IUinavigationActions m_UinavigationActionsCallbackInterface;
        private readonly InputAction m_Uinavigation_Newaction;
        public struct UinavigationActions
        {
            private @PlayerControls m_Wrapper;
            public UinavigationActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Newaction => m_Wrapper.m_Uinavigation_Newaction;
            public InputActionMap Get() { return m_Wrapper.m_Uinavigation; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UinavigationActions set) { return set.Get(); }
            public void SetCallbacks(IUinavigationActions instance)
            {
                if (m_Wrapper.m_UinavigationActionsCallbackInterface != null)
                {
                    @Newaction.started -= m_Wrapper.m_UinavigationActionsCallbackInterface.OnNewaction;
                    @Newaction.performed -= m_Wrapper.m_UinavigationActionsCallbackInterface.OnNewaction;
                    @Newaction.canceled -= m_Wrapper.m_UinavigationActionsCallbackInterface.OnNewaction;
                }
                m_Wrapper.m_UinavigationActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Newaction.started += instance.OnNewaction;
                    @Newaction.performed += instance.OnNewaction;
                    @Newaction.canceled += instance.OnNewaction;
                }
            }
        }
        public UinavigationActions @Uinavigation => new UinavigationActions(this);
        public interface ICharacterControlActions
        {
            void OnMoveCharacter(InputAction.CallbackContext context);
            void OnInteract(InputAction.CallbackContext context);
            void OnAttack(InputAction.CallbackContext context);
            void OnRun(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
        }
        public interface IUinavigationActions
        {
            void OnNewaction(InputAction.CallbackContext context);
        }
    }
}
